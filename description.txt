ECMA => European Computer Manufacturer's Association
No difference between '' or ""
javascript can change the attribute of HTML Tag
javascript can change CSS 
in Javascript after . seperator instead of - use capital charecter like : 
in CSS font-size in js fontSize
fixed values are called literals like 10.19  , 1 etc 
Hypens are not allowed in javascript . it consider substraction 
Javascript is a dynamically typed language 
undefined it self a datatype  mane kichu nai ... 

javascript events 

1.onload
2.onchange
3.onkeyupf
4.onkeydown
5.onclick 

for details : https://www.w3schools.com/js/js_htmldom_events.asp

String is premitive datatype 
array , objects are non premitive data type 

let x = "Ruhul Amin" -> this is literal syntax  -> string 
let y = new String("ruhul amin") -> this is not literal syntax -> object 

if(x == y )  // return true bcz it only check the value 
if(x === y ) // return false bcz it both check value & data type  
here x = string variable 
y = object 

you cannot compare tow objects 

example : 
let x = new String("ruhul");
let y = new String("ruhul");
if(x == y) // it returns false 
// bcz object cannot be compared though the values are same ! 

object's property can also be a function that time it is called method ! 

array is a special type of object 

array element can be function also 
 
const person = []
person["firstName"] = "ruhulamin"
person["lastName"] = "Amin"

console.log(person) // it will consider as object not array 
// though it is declered as an array 

let array = new array(40) // is a bad syntax !

typeof , instanseof  => these are operator ! 

array is an instanceof object 
object is not an instanceof array 

Everything in javascript is object !!

Constructor Function Example : 

let date = new Date()   // new makes the Date() function as Constructor function !

What is falsey value ? 
=> -0  , null , 12/"hello" etc are falsey value 

Boolean(falsey) // return false 

Booleans are also object 

let x = false;
let y = new Boolean(false) ; 
if(x == y )  // return true because  == operator only compares the value 
if(x === y) // return false because  === operator both check value & datatype 

!== operator means => not equal value or not equal type 


object properties can be written as array syntax 
Example : 
const person = {
    firstName : "ruhul",
    lastName:"Amin",
    age : "27"
};
console.log(person[0]) //  ruhul ;; 


// iterable => "ruhul"  

null itself an object !

Hoisting : (uporeer dike tule deya )
Hoisting meaning uttolon 

it is possible :  
Hoisting : 
x = 5; // assign before declaretion 
var x; // decleration 

but it cannot be done with let & const 
because  

in var 

x = undefined // automatically added this statement but in let it doesnot add ! that is why using let it cannnot be done ! 

in let , const , var hoisted done but in let & const it gives reference error 

"use strict"  :=> doesnot allow the hoisting mode !  // actually it converts the bad syntax into real error !  

this : https://www.youtube.com/watch?v=iMbMR86liyE&list=PLHiZ4m8vCp9OkrURufHpGUUTBjJhO9Ghy&index=52


eval("console.log('evel function execute the code inside its parameter!')")

There are 5 Primitive Data Types :
1.String 2.number 3.boolean 4.null 5.undefined 

Primitive values are immutable (they are hardcoded and therefore cannot be changed!)

object literal syntax : 

const person = {
    name:'ruhul',
    email :'rr@g.com'
};

after decleration of  an object property you can add new object property Example : 

const person = {
    name :"Ruhul Amin",
    email :"r@gmail.com"
};

person.country = "Bangladesh"; // here we have added a new Property for person object !
person.age  = 27 ;

let x = 'age';
console.log(person[x]); // it is possible!!

using delete key we can delete an object property 

delete person.email ; // this will delete email property of person object! 
delete applyes only object 

const info = {
    cars:{
        car1:"Toyota"
        car2:"Audy"
    }

}

console.log(info.cars.car1) // similarly 
console.log(info[cars][car1]) // same 


object accessories : getter, setter 

what is computed property of na object ? 

const person = {
    firstName :"Ruhul",
    lastName : "Amin",
    get lang(){
        return this.firstName + this.lastName; // this is called computed property of an object !
    }
};

console.log(person.lang); // dont have to put () after lang 

to make computed property we use getter 

javascript is called a prototype oriented language ! 


je object er moddhe symbole.iteration property ache shei object er upor for of loop chalano possible ..



Function expression / anonimus Function 

// this is called annonimus function or function expression
const express = function(a,b) {return a*b;}

console.log(express(12,32));

const myExpression = function(){
    return "This is function expression";
}

console.log(myExpression());