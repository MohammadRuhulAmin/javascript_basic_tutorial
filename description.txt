ECMA => European Computer Manufacturer's Association
No difference between '' or ""
javascript can change the attribute of HTML Tag
javascript can change CSS 
in Javascript after . seperator instead of - use capital charecter like : 
in CSS font-size in js fontSize
fixed values are called literals like 10.19  , 1 etc 
Hypens are not allowed in javascript . it consider substraction 
Javascript is a dynamically typed language 
undefined it self a datatype  mane kichu nai ... 

javascript events 

1.onload
2.onchange
3.onkeyupf
4.onkeydown
5.onclick 

for details : https://www.w3schools.com/js/js_htmldom_events.asp

String is premitive datatype 
array , objects are non premitive data type 

let x = "Ruhul Amin" -> this is literal syntax  -> string 
let y = new String("ruhul amin") -> this is not literal syntax -> object 

if(x == y )  // return true bcz it only check the value 
if(x === y ) // return false bcz it both check value & data type  
here x = string variable 
y = object 

you cannot compare tow objects 

example : 
let x = new String("ruhul");
let y = new String("ruhul");
if(x == y) // it returns false 
// bcz object cannot be compared though the values are same ! 

object's property can also be a function that time it is called method ! 

array is a special type of object 

array element can be function also 
 
const person = []
person["firstName"] = "ruhulamin"
person["lastName"] = "Amin"

console.log(person) // it will consider as object not array 
// though it is declered as an array 

let array = new array(40) // is a bad syntax !

typeof , instanseof  => these are operator ! 

array is an instanceof object 
object is not an instanceof array 

Everything in javascript is object !!

Constructor Function Example : 

let date = new Date()   // new makes the Date() function as Constructor function !

What is falsey value ? 
=> -0  , null , 12/"hello" etc are falsey value 

Boolean(falsey) // return false 

Booleans are also object 

let x = false;
let y = new Boolean(false) ; 
if(x == y )  // return true because  == operator only compares the value 
if(x === y) // return false because  === operator both check value & datatype 

!== operator means => not equal value or not equal type 


object properties can be written as array syntax 
Example : 
const person = {
    firstName : "ruhul",
    lastName:"Amin",
    age : "27"
};
console.log(person[0]) //  ruhul ;; 


// iterable => "ruhul"  

null itself an object !

Hoisting : (uporeer dike tule deya )
Hoisting meaning uttolon 

it is possible :  
Hoisting : 
x = 5; // assign before declaretion 
var x; // decleration 

but it cannot be done with let & const 
because  

in var 

x = undefined // automatically added this statement but in let it doesnot add ! that is why using let it cannnot be done ! 

in let , const , var hoisted done but in let & const it gives reference error 

"use strict"  :=> doesnot allow the hoisting mode !  // actually it converts the bad syntax into real error ! 